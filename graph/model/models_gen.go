// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Experience struct {
	Title       string           `json:"title"`
	Description string           `json:"description"`
	Time        *ExperienceTime  `json:"time"`
	Links       *ExperienceLinks `json:"links"`
}

type ExperienceTime struct {
	From string `json:"from"`
	To   string `json:"to"`
}

type NewPost struct {
	Title   string   `json:"title"`
	Content string   `json:"content"`
	Tags    []string `json:"tags"`
}

type Skill struct {
	Category string          `json:"category"`
	Contents []*SkillContent `json:"contents"`
}

type SkillContent struct {
	Name string            `json:"name"`
	Icon *SkillContentIcon `json:"icon"`
}

type SkillContentIconSrc string

const (
	SkillContentIconSrcImg SkillContentIconSrc = "img"
	SkillContentIconSrcFab SkillContentIconSrc = "fab"
	SkillContentIconSrcFas SkillContentIconSrc = "fas"
	SkillContentIconSrcFar SkillContentIconSrc = "far"
)

var AllSkillContentIconSrc = []SkillContentIconSrc{
	SkillContentIconSrcImg,
	SkillContentIconSrcFab,
	SkillContentIconSrcFas,
	SkillContentIconSrcFar,
}

func (e SkillContentIconSrc) IsValid() bool {
	switch e {
	case SkillContentIconSrcImg, SkillContentIconSrcFab, SkillContentIconSrcFas, SkillContentIconSrcFar:
		return true
	}
	return false
}

func (e SkillContentIconSrc) String() string {
	return string(e)
}

func (e *SkillContentIconSrc) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SkillContentIconSrc(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SkillContentIconSrc", str)
	}
	return nil
}

func (e SkillContentIconSrc) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
